{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "305942122254093655281075432715635772169899878925069571814645896149683160639822122518102190021285115462657336276725504781045796456007793656549745325984664925541379101585598416436807203369250933110303187921972020795383595318452921784361883448434110124350984630839094728823001262677955900269140807954075647051391718408638898329344340120562634645974130335415920582137404461908175609039649960784302302425676988191793235122846209497686323022681825256577140963760439724623506379998040563284314855139075465883529365150158197581116542730950189616703258055923102401913184728751055709372774666234195468958406624694944538066894495468411395740458344094230271293806188434425818186816840786952727960140265192756805845541113829661723853141994067713268748120807645732003300737328887417581275760445856259825329723042059711736723074803581765172579271984289493566154210234579729594290664239735982208235974658689750131173109420301693965168068828966484670227435166674994542827663988050795143721339816772596404489983861027815029364354379490504723689667657317593162247208990799203068417902634412157236786289361381385130001981436196969112932025093241233351145615698408614902095014280725386242462793685617333718849853493322023345786683134804731076660703448451\n",
      "(65537, 485713328970380540240280610129592869245702237535371726803206394556080923831004705936947866015118308773410875118835184715902680727875803890997721510701097704208242230501618130951712696849753679863389641505144829044424342554460187918685328528235406995274280010684670885474954824128357609434070057809399169524084559735354377883781307670910738724529991944778019596464842308703112378234583551248477531959008795760575278535716147279424626576551805717777155721508033946354060443398503200512311883722356373241862394454351049240040356033465801848950357363793770329626686668830193314465210563031609520216275474775191754246650020664556178658289017854702967756112268011113934690177327671770784430457208298077015353897395414325152317041026388678630420961796531921288528604028747621754376763089762060802341138756216345798867833943715923500564481179407919368275894103195774820668473689266557527949659489201652969302681075308621261058775649961771568047173897109795662676636697699790083908881464164025785883854141916321142419406071195220418640923560579770499085927423276282677361975818947470587395309762624933366587169834426842401253592647212345446478489098510465130080683580109882682090129925910114622456531343194241269516572595187005658799693697719)\n",
      "https://discord.gg/WgWBNcq9\n"
     ]
    }
   ],
   "source": [
    "from Crypto.Util import number\n",
    "import random\n",
    "\n",
    "# program to encrypt a message usign RSA\n",
    "def generate_keypair(bits):\n",
    "    p = number.getPrime(bits)\n",
    "    q = number.getPrime(bits)\n",
    "    n = p * q\n",
    "    phi = (p-1) * (q-1)\n",
    "\n",
    "    e = 65537\n",
    "    d = pow(e, -1, phi)\n",
    "\n",
    "    return ((e, n), (d, n))\n",
    "\n",
    "def encrypt(public_key, plaintext):\n",
    "    e, n = public_key\n",
    "    plaintext_bytes = plaintext.encode('utf-8')\n",
    "    plaintext_int = int.from_bytes(plaintext_bytes, byteorder='big')\n",
    "    ciphertext_int = pow(plaintext_int, e, n)\n",
    "    return ciphertext_int\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install pycryptodome"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
